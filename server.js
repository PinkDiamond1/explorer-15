// Generated by LiveScript 1.5.0
var express = require('express');
var bodyParser = require('body-parser');
var cookieParser = require('cookie-parser');
var formidable = require("formidable"); 
var cors = require('cors');

var web3 = require('./web3.js');



(function(){
  var createModule, balance, txlist, account, contract, transaction, block, logs, proxy, stats, modules, api, responsity, app;
  

  createModule = function(actions){
    return function(query, cb, req, res){
      var action;
      action = actions[query.action];
      if (action == null) {
        return cb('Action Not Found');
      }
      return action(query, cb, req, res);
    };
  };

  /*
  balance = function(query, cb){
    if (query.address == null) {
      return cb("Address is required");
    }
    return web3.eth.getBalance(query.address, function(err, data){
      if (err != null) {
        return cb(err);
      }
      return cb(null, data.toString());
    });
  };
  txlist = function(query, cb){
    return cb(null, []);
  };
  account = createModule({
    balance: balance,
    txlist: txlist
  });
  contract = createModule({});
  transaction = createModule({});
  block = createModule({});
  logs = createModule({});
  proxy = createModule({});
  stats = createModule({});
  modules = {
    account: account,
    contract: contract,
    transaction: transaction,
    block: block,
    logs: logs,
    proxy: proxy,
    stats: stats
  };
  */


  // bingding services and scripts.
  moduleNames = ['account', 'wallet', 'transaction', 'onekeytoken', 'browse', 'questionaries', 'rapiddeployment']
  modules = {}
  for (const i in moduleNames) {
    const li = moduleNames[i]
    modules[li] = createModule( require('./services/'+li+'.js')({
      web3: web3
    }) )
  }

  api = function(req, res, query, cb){
    var module;
    // console.log(JSON.stringify(query));
    module = modules[query.module];
    if (module == null) {
      return cb('Module Not Found');
    }
    return module(query, function(err, data){
      if (err != null) {
        return cb(err);
      }
      return cb(null, data);
    }, req, res);
  };
  responsity = function(res){
    return function(err, result){
      var ref$;
      if (err != null) {
        return res.send({
          status: "0",
          message: "ERROR",
          result: (ref$ = err.message) != null ? ref$ : err
        });
      }
      return res.send({
        status: "1",
        message: "OK",
        result: result
      });
    };
  };
  app = express()
  .use(cors())
  .use(cookieParser())
  .use(express['static']('app'))
  .use(bodyParser.json()) // for parsing application/json
  .use(bodyParser.urlencoded({ extended: true })) // for parsing application/x-www-form-urlencoded
  .post('/fapi', function(req, res){
    var form = new formidable.IncomingForm();  
      form.parse(req, function(err, fields, files) {
        // console.log('err',err);
        // console.log('fields',fields);//表单传递的input数据  
        // console.log('files',files);//上传文件数据  
        //do somthing......  
        fields.files = files;
        return api(req, res, fields, responsity(res));
      }); 
  })
  .post('/papi', function(req, res){
    // console.log(req.body)
    return api(req, res, req.body, responsity(res));
  })
  .get('/api', function(req, res){
    return api(req, res, req.query, responsity(res));
  })
  .get('/*', function(req, res){
    return res.redirect("/#" + req.url);
  });
  app.listen(8000, function(){
    return console.log('app listening on port 8000!');
  });

}).call(this);
